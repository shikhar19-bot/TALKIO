{"version":3,"sources":["components/SingleChat.js","components/Authentication/Login.js","components/Authentication/Signup.js","pages/Homepage.js","Context/ChatProvider.js","components/ChatLoading.js","components/miscellaneous/ProfileModal.js","components/UserAvatar/UserListItem.js","components/UserAvatar/UserBadgeItem.js","components/miscellaneous/GroupChatModal.js","components/miscellaneous/SideDrawer.js","config/ChatLogics.js","components/MyChats.js","components/ScrollableChat.js","components/miscellaneous/UpdateGroupChatModal.js","components/ChatBox.js","pages/Chatpage.js","App.js","index.js"],"names":["socket","selectedChatCompare","Login","_useState","useState","_useState2","_slicedToArray","show","setShow","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","_useState7","_useState8","loading","setLoading","toast","useToast","history","useHistory","submitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","config","_yield$axios$post","data","wrap","_context","prev","next","title","status","duration","isClosable","position","abrupt","headers","axios","post","sent","localStorage","setItem","JSON","stringify","window","location","reload","push","t0","description","response","message","stop","apply","arguments","_jsxs","VStack","spacing","children","FormControl","id","isRequired","_jsx","FormLabel","Input","value","placeholder","onChange","e","target","InputGroup","type","InputRightElement","width","Button","h","size","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","name","setName","_useState9","_useState10","confirmpassword","setConfirmpassword","_useState11","_useState12","pic","setPic","_useState13","_useState14","handleClick","p","accept","pics","undefined","FormData","append","then","console","log","url","toString","catch","error","postDetails","files","Homepage","useEffect","parse","getItem","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","color","Tabs","TabList","mb","Tab","TabPanels","TabPanel","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ChatLoading","Stack","Skeleton","height","ProfileModal","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","fontfamily","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","mr","UserListItem","handleFunction","cursor","_hover","background","px","py","Avatar","UserBadgeItem","backgroundColor","CloseIcon","GroupChatModal","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","search","setSearch","searchResult","setSearchResult","_ChatState","handleSearch","_ref2","query","_yield$axios$get","Authorization","concat","token","get","_x","handleSubmit","_ref3","_callee2","_context2","users","map","_id","_toConsumableArray","flexWrap","u","delUser","filter","slice","userToAdd","includes","SideDrawer","loadingChat","setLoadingChat","accessChat","userId","find","c","display","Tooltip","label","hasArrow","placement","class","Menu","MenuButton","NotificationBadge","count","length","effect","Effect","SCALE","BellIcon","MenuList","pl","notif","MenuItem","chat","n","isGroupChat","chatName","sender","as","rightIcon","ChevronDownIcon","MenuDivider","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","pb","Spinner","ml","getSender","loggedUser","isSameSender","messages","i","isLastMessage","isSameSenderMargin","isSameUser","MyChats","fetchAgain","setLoggedUser","fetchChats","lg","AddIcon","overflowY","latestMessage","content","substring","ScrollableChat","ScrollableFeed","mt","marginLeft","padding","maxWidth","UpdateGroupChatModal","setFetchAgain","fetchMessages","renameLoading","setRenameLoading","handleRemove","user1","_yield$axios$put","groupAdmin","put","chatId","handleAddUser","_yield$axios$put2","_x2","handleRename","_ref4","_callee3","_yield$axios$put3","_context3","_ref5","_callee4","_context4","_x3","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","isTyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","sendMessage","key","sendMessage2","_yield$axios$post2","ArrowBackIcon","toUpperCase","alignSelf","margin","className","onKeyDown","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","ArrowRightIcon","right","top","transform","ChatBox","Chatpage","App","Route","path","component","exact","ReactDOM","render","BrowserRouter","ChakraProvider","document","getElementById"],"mappings":"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","file":"static/js/main.09d18b3e.chunk.js","sourcesContent":["import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text} from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast,Button  } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon ,ArrowRightIcon} from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport Lottie from 'react-lottie'\r\nimport animationData from '../animations/typing.json';\r\n\r\n\r\nconst ENDPOINT=\"http://localhost:5000\";\r\nlet socket,selectedChatCompare;\r\n      \r\n\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n    const { selectedChat, setSelectedChat, user,notification,setNotification } =\r\n    ChatState();\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const toast = useToast();\r\n\r\n \r\n\r\n\r\n\r\n\r\n const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id)\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n\r\n  useEffect(()=>{\r\nsocket=io(ENDPOINT)\r\n      socket.emit(\"setup\",user)\r\n      socket.on(\"connected\",()=>\r\n      setSocketConnected(true))\r\n      socket.on(\"typing\",()=>setIsTyping(true));\r\n       socket.on(\"stop typing\",()=>setIsTyping(false));\r\n      \r\n\r\n    },[]);\r\n\r\n   useEffect(() => {\r\n    fetchMessages();\r\n    selectedChatCompare=selectedChat\r\n  }, [selectedChat]);\r\n\r\n  // console.log(notification,\"........\");\r\n\r\n\r\n useEffect(()=>{\r\n    socket.on(\"message recieved\",(newMessageRecieved)=>{\r\n      if(!selectedChatCompare || selectedChatCompare._id!==newMessageRecieved.chat._id )\r\n      {\r\n        // dive notification\r\n        // check if notification does not includes the new msg recived then just add newmsgrec..to notification array\r\n        \r\n        if(!notification.includes(newMessageRecieved))\r\n        {\r\n          setNotification([newMessageRecieved,...notification]);\r\n          // update  the list of chat so latest msg is update\r\n          setFetchAgain(!fetchAgain)\r\n        }\r\n\r\n      }\r\n      else\r\n      {\r\n        setMessages([...messages,newMessageRecieved])\r\n      }\r\n    })\r\n  })\r\n\r\n\r\n   const sendMessage=async(e)=>{\r\n       if (e.key === \"Enter\" && newMessage) \r\n       {\r\n        socket.emit(\"stop typing\",selectedChat._id)\r\n        try {\r\n            const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat._id,\r\n          },\r\n          config\r\n        );\r\n        // console.log(data);\r\n\r\n        socket.emit(\"new message\",data)\r\n    \r\n          setMessages([...messages, data]);\r\n          setFetchAgain(!fetchAgain)\r\n          \r\n        } catch (error) {\r\n           toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n         }\r\n       }\r\n   };\r\n\r\n\r\n     //  using send button\r\n  const sendMessage2 = async (e) => {\r\n    if (newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id)\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat._id,\r\n          },\r\n          config\r\n        );\r\n        // console.log(data)\r\n        // appending this data to the array of all of the messages 9:00 #14\r\n        // socket.emit(\"new message\", data)\r\n        socket.emit(\"new message\", data)\r\n        setMessages([...messages, data]);\r\n        // added by me\r\n        setFetchAgain(!fetchAgain)\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n   \r\n  \r\n\r\n\r\n   \r\n \r\n \r\n  const typingHandler=(e)=>{\r\n    setNewMessage(e.target.value);\r\n\r\n    // first check if socket is connected or not if not return it\r\n   if(!socketConnected)return;\r\n\r\n    //  if not typing\r\n    if(!typing)\r\n    {\r\n      setTyping(true)\r\n      socket.emit(\"typing\",selectedChat._id)\r\n    }\r\n  // create debounding like   function decide when to stop typing\r\n  // let say after 3sec it show not typing\r\n\r\n  let lastTypingTime=new Date().getTime();\r\n  var timerLength =3000;\r\n  setTimeout(()=>{\r\n    var timeNow =new Date().getTime();\r\n    var timeDiff=timeNow-lastTypingTime;\r\n   if(timeDiff>=timerLength && typing)\r\n   {\r\n    socket.emit(\"stop typing\",selectedChat._id);\r\n    setTyping(false);\r\n   }\r\n\r\n  },timerLength)\r\n\r\n   };\r\n\r\n\r\n return (\r\n    <>\r\n\r\n    {selectedChat ? (<>\r\n      <Text \r\n      fontSize={{base:\"28px\" ,md:\"30px\"}}\r\n      pb={3}\r\n      px={2}\r\n      w={'100%'}\r\n      fontFamily={'work sans'}\r\n      d={'flex'}\r\n      justifyContent={{base:\"space-between\"}}\r\n      alignItems={'center'}\r\n      >\r\n        <IconButton \r\n        d={{base:'flex',md:\"none\"}}\r\n        icon={<ArrowBackIcon />}\r\n        onClick={()=>setSelectedChat(\"\")}\r\n        />\r\n        {!selectedChat.isGroupChat ? (   \r\n        \r\n        <>\r\n        \r\n        {getSender(user,selectedChat.users )}\r\n        <ProfileModal user={getSenderFull(user,selectedChat.users )} />\r\n        \r\n        </>) :\r\n        \r\n        (\r\n            <>{selectedChat.chatName.toUpperCase()}\r\n            <UpdateGroupChatModal \r\n                 \r\n          \r\n                fetchMessages={fetchMessages}\r\n                fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                />\r\n\r\n                </>\r\n\r\n\r\n        )} \r\n\r\n      </Text>\r\n\r\n      <Box\r\n      d={'flex'}\r\n      flexDir='column'\r\n      justifyContent={'flex-end'}\r\n      p={3}\r\n      bg='#E8E8E8'\r\n      w='100%'\r\n      h='100%'\r\n      borderRadius=\"lg\"\r\n      overflowY=\"hidden\"\r\n      >\r\n\r\n        {/* send ur message here */}\r\n    {\r\n      loading ? ( <Spinner\r\n              size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n      \r\n      />):(\r\n        <div className='messages'>\r\n         <ScrollableChat \r\n         messages={messages}/>\r\n        </div>\r\n      )}\r\n      <FormControl  onKeyDown={sendMessage} isRequired mt={3}>\r\n       {isTyping ? <div>\r\n       <Lottie \r\n       options={defaultOptions}\r\n       width={90}\r\n       style={{marginBottom:15,marginLeft:0}}\r\n       />\r\n       </div>  :  <> </>}\r\n\r\n        {/* <Button colorScheme=\"teal\" ml={2} onClick={sendMessage2}>\r\n                send\r\n              </Button> */}\r\n        <Input\r\n               variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n                \r\n        />\r\n              <IconButton\r\n        icon={<ArrowRightIcon />}\r\n        aria-label=\"Send message\"\r\n        position=\"absolute\"\r\n        right=\"0\"\r\n        top=\"50%\"\r\n        transform=\"translateY(-50%)\"\r\n        onClick={sendMessage2}\r\n      />\r\n\r\n         \r\n\r\n      </FormControl>\r\n\r\n      </Box>\r\n    \r\n    </>\r\n    ):\r\n    \r\n    \r\n    \r\n    (\r\n        <Box d={'flex'} alignItems={'center'} justifyContent={'center'} h={'100%'}>\r\n            <Text fontSize={'3xl'} pb={1} fontFamily={'work sans'}>\r\n                Click on a user to start chatting\r\n\r\n            </Text>\r\n            \r\n        </Box>\r\n\r\n    )}\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    </>\r\n )\r\n    }\r\n\r\nexport default SingleChat;","import { Button, FormControl, FormLabel, Input, InputGroup, InputRightElement } from '@chakra-ui/react';\r\nimport { VStack } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport { useToast } from '@chakra-ui/react'; \r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\n\r\nconst Login = () => {\r\n   \r\n\r\n  const [show,setShow]=useState(false);\r\n \r\n   const [email,setEmail]=useState();\r\n   const [password,setPassword]=useState();\r\n   const [loading,setLoading]=useState(false);\r\n       const toast = useToast();\r\n     const history =useHistory();\r\n   \r\n\r\n   const handleClick =()=>setShow(!show);\r\n\r\n   \r\n\r\n   const submitHandler = async()=>{\r\n   \r\n    setLoading(true);\r\n    if(!email || !password)\r\n    {\r\n      toast({\r\n        title:\"Please fill all the fields\",\r\n        status:\"warning\",\r\n        duration:5000,\r\n        isClosable:true,\r\n        position:\"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return; \r\n    }\r\n    try {\r\n      \r\n    const config={\r\n      headers:{\r\n        \"Content-type\":\"application/json\",\r\n      },\r\n    };\r\n    const {data} =await axios.post(\"/api/user/login\",{email,password},config);\r\n    \r\n    toast({\r\n      title:\"Login Successful\",\r\n      status:\"success\",\r\n      duration:5000,\r\n      isClosable:true,\r\n      position:'bottom',\r\n\r\n    });\r\n    \r\n    localStorage.setItem(\"userInfo\",JSON.stringify(data));\r\n    setLoading(false);\r\n    window.location.reload(false)\r\n    history.push(\"/chats\");\r\n  } catch(error)\r\n  {\r\n    toast({\r\n      title:\"Error occured!\",\r\n       description: error.response.data.message,\r\n      status:\"error\",\r\n      duration:5000,\r\n      isClosable:true,\r\n      position:\"bottom\",\r\n    });\r\n    setLoading(false);\r\n  }\r\n\r\n   };\r\n\r\n  return (\r\n    <VStack  spacing={'5px'}>\r\n    \r\n\r\n    <FormControl id='email' isRequired>\r\n      <FormLabel>Email</FormLabel>\r\n      <Input \r\n      value={email}\r\n      placeholder={'enter your email'}\r\n      onChange={(e)=>setEmail(e.target.value)}\r\n      />\r\n    </FormControl>\r\n\r\n    <FormControl id='password' isRequired>\r\n      <FormLabel>Password</FormLabel>\r\n      <InputGroup>\r\n       <Input \r\n\r\n       type={show?'text':'password'} \r\n      placeholder={'enter your password'}\r\n      value={password}\r\n      onChange={(e)=>setPassword(e.target.value)}\r\n      />\r\n      <InputRightElement width={'4.5rem'}>\r\n        <Button h={'1.75rem'} size='sm' onClick={handleClick}>\r\n            {show ?'Hide':'Show'}\r\n        </Button>\r\n      </InputRightElement>\r\n      </InputGroup>\r\n      \r\n    </FormControl>\r\n\r\n    \r\n    <Button colorScheme='blue'\r\n    width={'100%'}\r\n    style={{marginTop:15}}\r\n    onClick={submitHandler}\r\n    isLoading={loading}\r\n    > \r\n       Login\r\n    </Button> \r\n     \r\n    <Button variant='solid'\r\n    colorScheme='red'\r\n    width={'100%'}\r\n    onClick={()=>{\r\n      setEmail('guest@example.com');\r\n      setPassword('123456');\r\n    }}\r\n    >\r\n      Get Guest User Credentials\r\n    </Button>\r\n      \r\n\r\n\r\n    </VStack>\r\n  )\r\n}\r\n\r\n\r\nexport default Login","import { Button, FormControl, FormLabel, Input, InputGroup, InputRightElement } from '@chakra-ui/react';\r\nimport { VStack } from '@chakra-ui/react';\r\n\r\nimport React from 'react'\r\nimport { useState } from 'react';\r\nimport { useToast } from '@chakra-ui/react'; \r\nimport axios from 'axios';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\n\r\nconst Signup = () => {\r\n\r\n  const [show,setShow]=useState(false);\r\n   const [name,setName]=useState();\r\n   const [email,setEmail]=useState();\r\n   const [password,setPassword]=useState();\r\n   const [confirmpassword,setConfirmpassword]=useState();\r\n   const [pic,setPic]=useState();\r\n   const [loading,setLoading]=useState(false);\r\n     const toast = useToast();\r\n     const history =useHistory();\r\n\r\n\r\n   const handleClick =()=>setShow(!show);\r\n\r\n   const postDetails = (pics) => {\r\n    setLoading(true);\r\n\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (pics.type !== \"image/jpeg\" && pics.type !== \"image/png\") {\r\n      toast({\r\n        title: \"Please Select a JPEG or PNG Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n\r\n      const data = new FormData()\r\n      data.append(\"file\", pics)\r\n      data.append(\"upload_preset\", 'chatting app')\r\n      data.append(\"cloud_name\", 'akanshajaiswal')\r\n      axios.post(\"https://api.cloudinary.com/v1_1/akankshajaiswal/image/upload\", data)\r\n        .then((response) => {\r\n          console.log(\"Cloudinary response:\", response);\r\n          setPic(response.data.url.toString());\r\n          setLoading(false);\r\n          toast({\r\n            title: \"Image uploaded successfully!\",\r\n            status: \"success\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom\",\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Cloudinary error:\", error);\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }\r\n\r\n   const submitHandler = async()=>{\r\n    setLoading(true);\r\n    // gonna check if all field is fill or not if no then show warning\r\n   if(!name || !email || !password || !confirmpassword)\r\n   {\r\n    toast({\r\n      title:\"Please fill all the fields\",\r\n      status:\"warning\",\r\n      duration:5000,\r\n      isClosable:true,\r\n      position:\"bottom\",\r\n\r\n    });\r\n    setLoading(false);\r\n    return; \r\n   }\r\n   if(password!==confirmpassword)\r\n   {\r\n    toast({\r\n      title:\"Passwords Do not match\",\r\n      status:\"warning\",\r\n      duration:5000,\r\n      isClosable:true,\r\n      position:'bottom'\r\n    });\r\n    return;\r\n   }\r\n   try{\r\n    const config={\r\n      headers:{\r\n        \"Content-type\":\"application/json\",\r\n      },\r\n    };\r\n          const {data} =await axios.post('/api/user',\r\n          {name,email,password,pic},\r\n          config\r\n          ); \r\n          toast({\r\n            title:\"Registration Successful\",\r\n            status:\"success\",\r\n            duration:5000,\r\n            isClosable:true,\r\n            position:\"bottom\",\r\n          });\r\n         localStorage.setItem(\"userInfo\",JSON.stringify(data));\r\n         \r\n         setLoading(false);\r\n         history.push(\"/chats\");\r\n   } catch(error)\r\n   {\r\n      //  if any error occurs\r\n      toast({\r\n        title:\"error Occured!\",\r\n        description:error.response.data.message,\r\n        status:'error',\r\n        duration:5000,\r\n        isClosable:true,\r\n        position:'bottom',\r\n      });\r\n      setLoading(false);\r\n   }\r\n\r\n   };\r\n\r\n  return (\r\n    <VStack  spacing={'5px'}>\r\n    <FormControl id='first-name' isRequired>\r\n      <FormLabel>Name</FormLabel>\r\n      <Input \r\n      placeholder={'enter your name'}\r\n      onChange={(e)=>setName(e.target.value)}\r\n      />\r\n    </FormControl>\r\n\r\n    <FormControl id='email' isRequired>\r\n      <FormLabel>Email</FormLabel>\r\n      <Input \r\n      placeholder={'enter your email'}\r\n      onChange={(e)=>setEmail(e.target.value)}\r\n      />\r\n    </FormControl>\r\n\r\n    <FormControl id='password' isRequired>\r\n      <FormLabel>Password</FormLabel>\r\n      <InputGroup>\r\n       <Input \r\n       type={show?'text':'password'} \r\n      placeholder={'enter your password'}\r\n      onChange={(e)=>setPassword(e.target.value)}\r\n      />\r\n      <InputRightElement width={'4.5rem'}>\r\n        <Button h={'1.75rem'} size='sm' onClick={handleClick}>\r\n            {show ?'Hide':'Show'}\r\n        </Button>\r\n      </InputRightElement>\r\n      </InputGroup>\r\n      \r\n    </FormControl>\r\n\r\n     <FormControl id='password' isRequired>\r\n      <FormLabel>Confirm Password</FormLabel>\r\n      <InputGroup>\r\n       <Input \r\n       type={show?'text':'password'} \r\n      placeholder={'enter your password'}\r\n      onChange={(e)=>setConfirmpassword(e.target.value)}\r\n      />\r\n      <InputRightElement width={'4.5rem'}>\r\n        <Button h={'1.75rem'} size='sm' onClick={handleClick}>\r\n            {show ?'Hide':'Show'}\r\n        </Button>\r\n      </InputRightElement>\r\n      </InputGroup>\r\n      \r\n    </FormControl>\r\n\r\n    <FormControl id='pic'>\r\n      <FormLabel>Upload your Picture</FormLabel>\r\n      <Input\r\n      type='file'\r\n      p={1.5}\r\n      accept='image/*'\r\n      onChange={(e)=> postDetails(e.target.files[0])}\r\n      />\r\n    </FormControl>\r\n    \r\n    <Button colorScheme='blue'\r\n    width={'100%'}\r\n    style={{marginTop:15}}\r\n    onClick={submitHandler}\r\n    isLoading={loading}>\r\n       Sign Up\r\n    </Button>\r\n      \r\n\r\n\r\n    </VStack>\r\n  )\r\n}\r\n\r\nexport default Signup","import React from 'react'\r\nimport {\r\n  \r\n  Box,\r\n  Container,\r\n  Text,\r\n  Tabs,\r\n  Tab,\r\n  TabList,\r\n  TabPanels,\r\n  TabPanel\r\n  \r\n  \r\n} from \"@chakra-ui/react\";\r\n\r\nimport Login from '../components/Authentication/Login';\r\nimport Signup from '../components/Authentication/Signup';\r\n\r\nimport { useEffect } from 'react';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Homepage = () => {\r\n\r\n   const history =useHistory();\r\n    useEffect(() => {\r\n      const user =  JSON.parse(localStorage.getItem(\"userInfo\"));\r\n      \r\n      if (user) \r\n      {\r\n        history.push(\"/chats\");\r\n      }\r\n  }, [history]);\r\n\r\n\r\n\r\n  return <Container maxW={'xl'} centerContent>\r\n    <Box d='flex'\r\n    justifyContent={\"center\"}\r\n    p={3}\r\n    bg={\"White\"}\r\n    w=\"100%\"\r\n    m={\"40px 0 15px 0\"}\r\n    borderRadius={'lg'}\r\n    borderWidth={\"1px\"}\r\n     >\r\n      <Text fontSize={'4xl'} fontFamily={\"Word sans\"} color={'black'}>\r\n        Talkio\r\n      </Text>\r\n    </Box>\r\n    <Box bg={'white'} w={'100%'} p={4} borderRadius={'lg'} borderWidth={'1px'}>\r\n      <Tabs variant='soft-rounded' >\r\n  <TabList mb={'1em'}>\r\n    <Tab width={'50%'}>Login</Tab>\r\n    <Tab width={'50%'}>Sign Up</Tab>\r\n  </TabList>\r\n  <TabPanels>\r\n    <TabPanel>\r\n    <Login/>\r\n    </TabPanel>\r\n    <TabPanel>\r\n      <Signup/>\r\n    </TabPanel>\r\n  </TabPanels>\r\n</Tabs>\r\n    </Box>\r\n\r\n  </Container>\r\n    \r\n  \r\n}\r\n\r\nexport default Homepage","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState([]);\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n\r\n\r\n// import React, {  createContext, useContext, useEffect, useState } from 'react'\r\n// // import {useNavigate} from \"react-router-dom\"\r\n// import { useHistory } from 'react-router-dom/cjs/react-router-dom.min'\r\n\r\n// const ChatContext = createContext()\r\n// const ChatProvider = ({ children }) => {\r\n//   const history = useHistory()\r\n//   const [user, setUser] = useState()\r\n//   const [selectedChat, setSelectedChat] = useState() // object of one on one chat accessChat api , it means chatModel of one particular chat, which will container two users(inside chatModel's users: array) for one on one and a 2 or more users for groupChat\r\n//   const [chats, setChats] = useState() // array of all chatModels, it will be a array that will contain objects (chatModel) to how many users , the logged in user chatted with => fetchChat api\r\n//   // chat = [{a}, {b}, {v},....]\r\n//   const [notification, setNotification] = useState([])\r\n  \r\n//   useEffect(() => {\r\n//     const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"))\r\n//     setUser(userInfo)\r\n//     if (!userInfo) {\r\n//       history.push(\"/\")\r\n//     }\r\n//   }, [history])\r\n//   return (\r\n//     <ChatContext.Provider value={{user, setUser, selectedChat, setSelectedChat, chats, setChats, notification, setNotification}}>\r\n//       {children}\r\n//     </ChatContext.Provider>\r\n//   )\r\n// }\r\n// export const ChatState = ()=>{\r\n//   return useContext(ChatContext)\r\n// }\r\n\r\n// export default ChatProvider ","import React from 'react';\r\nimport {Stack,Skeleton } from '@chakra-ui/react';\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n         <Skeleton height='45px' />\r\n         <Skeleton height='45px' />\r\n         <Skeleton height='45px' />\r\n         <Skeleton height='45px' />\r\n         <Skeleton height='45px' />\r\n         <Skeleton height='45px' />\r\n         <Skeleton height='45px' />\r\n         <Skeleton height='45px' />\r\n         <Skeleton height='45px' />\r\n    </Stack>\r\n  )\r\n}\r\n\r\nexport default ChatLoading;","import {useDisclosure} from '@chakra-ui/hooks';\r\n\r\nimport { IconButton,Modal,ModalOverlay,ModalContent,ModalHeader\r\n  ,ModalCloseButton,ModalBody,ModalFooter,Button,Image ,Text} from '@chakra-ui/react'\r\n\r\nimport {ViewIcon} from'@chakra-ui/icons';\r\n\r\nconst ProfileModal = ({user,children}) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n     return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n\r\n            <Modal  size=\"lg\" isOpen={isOpen} onClose={onClose}  isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n          fontSize=\"40px\"\r\n          fontfamily=\"Work sans\"\r\n          d=\"flex\"\r\n          justifyContent=\"center\"\r\n          > \r\n        {user.name}\r\n        </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody  \r\n          d=\"flex\"\r\n          flexDir=\"column\"\r\n          alignItems={'center'}\r\n          justifyContent=\"space-between\"\r\n          >\r\n             <Image \r\n             borderRadius=\"full\"\r\n             boxSize=\"150px\"\r\n             src={user.pic}\r\n             alt={user.name}\r\n             \r\n             />\r\n             <Text \r\n             fontSize={{base:\"28px\" ,md:\"30px\"}}\r\n             fontfamily=\"Work sans\"\r\n             >\r\n              Email:{user.email}\r\n\r\n             </Text>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n         \r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n\r\n      </>\r\n      )\r\n};\r\n\r\nexport default ProfileModal;","import { Avatar } from \"@chakra-ui/react\";\r\nimport { Box, Text } from \"@chakra-ui/react\";\r\n\r\n\r\nconst UserListItem = ({user, handleFunction }) => {\r\n  \r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;","\r\nimport {CloseIcon} from '@chakra-ui/icons'\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport React from 'react'\r\n\r\n\r\nconst UserBadgeItem = ({user,handleFunction}) => {\r\n\r\n\r\n\r\n  return (\r\n    <Box\r\n    px={2}\r\n    py={1}\r\n    borderRadius={'lg'}\r\n    m={2}\r\n    variant='solid'\r\n    fontSize={12}\r\n\r\n    backgroundColor='purple'\r\n    color={'white'}\r\n    cursor={'pointer'}\r\n    onClick={handleFunction}\r\n    >\r\n        {user.name} \r\n        <CloseIcon p={1} />\r\n\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default UserBadgeItem","\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../UserAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({children}) => {\r\n     const { isOpen, onOpen, onClose } = useDisclosure();\r\n     const [groupChatName,setGroupChatName]=useState();\r\n     const [selectedUsers,setSelectedUsers]=useState([]);\r\n     const[search,setSearch]=useState(\"\");\r\n     const [searchResult,setSearchResult]=useState([]);\r\n     const [loading,setLoading]=useState(false);\r\n\r\n     const toast=useToast();\r\n\r\n     const {user,chats,setChats}=ChatState();\r\n\r\n      const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n      // console.log(data)\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter(u => u._id !== delUser._id))\r\n  };\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\"/api/chat/group\", {\r\n        name: groupChatName,\r\n        users: JSON.stringify(selectedUsers.map(user=> user._id))\r\n      }, config)\r\n      setChats([data, ...chats]) // Chats array container with how many users([{a},{b},{c}]) , we chatted , now we added one group also \r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n\r\n    }\r\n  };\r\n \r\n\r\n    //  const  handleSearch=async(query)=>{\r\n    //     setSearch(query);\r\n    //     if(!query)\r\n    //     {\r\n    //         return;\r\n    //     }\r\n    //     try{\r\n\r\n    //         setLoading(true);\r\n    //         const config={\r\n    //             headers:{\r\n    //                 Authorization:`Bearer ${user.token}`,\r\n    //             },\r\n    //         };\r\n\r\n    //         const {data} = await axios.get(`/api/user?search=${search}`,config);\r\n          \r\n    //         setLoading(false);\r\n    //         setsearchResult(data);\r\n\r\n\r\n\r\n    //     } catch(error)\r\n    //     { \r\n    //         toast({\r\n    //             title:\"Error Occured!\",\r\n    //             description:\"Failed to Load the Search Results\",\r\n    //             status:\"error\",\r\n    //             duration:5000,\r\n    //             isClosable:true,\r\n    //             position:\"bottom-left\",\r\n\r\n    //         });\r\n\r\n    //     }\r\n\r\n    //  }\r\n\r\n    //  const handleSubmit= async()=>{\r\n    //   if(!groupChatName || !selectedUsers)\r\n    //   {\r\n    //     toast({\r\n    //         title:\"Please fill all the fields\",\r\n               \r\n    //             status:\"warning\",\r\n    //             duration:5000,\r\n    //             isClosable:true,\r\n    //             position:\"top\",\r\n\r\n\r\n    //     });\r\n    //     return;\r\n    //   }\r\n    //        try {\r\n            \r\n    //         const config={\r\n    //             headers:{\r\n    //                 Authorization:`Bearer ${user.token}`,\r\n    //             },\r\n    //         };\r\n\r\n    //         const {data} =await axios.post(`/api/chat/group`,{\r\n    //                      name:groupChatName,\r\n    //                      users:JSON.stringify(selectedUsers.map((u)=>u._id)),\r\n    //         },\r\n    //         config\r\n\r\n    //         );\r\n    //         window.location.reload(false);\r\n    //         setchats([data,...chats]);\r\n    //         onClose();\r\n    //         toast({\r\n    //           title:\"New Group Chat Created!\",\r\n            \r\n    //             status:\"success\",\r\n    //             duration:5000,\r\n    //             isClosable:true,\r\n    //             position:\"bottom\",\r\n\r\n    //         });\r\n\r\n            \r\n    //        } catch (error) {\r\n    //         toast({\r\n    //           title:\"Failed to Create the Chat!\",\r\n    //        description: error.response.data,\r\n            \r\n    //             status:\"error\",\r\n    //             duration:5000,\r\n    //             isClosable:true,\r\n    //             position:\"bottom\",\r\n\r\n    //         });\r\n            \r\n    //        }\r\n\r\n    //  }\r\n   \r\n \r\n    \r\n    \r\n  return (\r\n      <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n          fontSize=\"35px\"\r\n          fontFamily=\"Work sans\"\r\n          d=\"flex\"\r\n          justifyContent={'center'}\r\n          \r\n          \r\n          >Create Group Chat\r\n\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n          d=\"flex\"\r\n          flexDir='column'\r\n          alignItems='center'\r\n          \r\n          >\r\n            <FormControl>\r\n                <Input \r\n                placeholder=\"Chat Name\"\r\n                mb={'3'}\r\n                onChange={(e)=>setGroupChatName(e.target.value)}\r\n                \r\n                />\r\n\r\n\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n                <Input \r\n                placeholder=\"Add Users eg: John,Piyush \"\r\n                mb={'1'}\r\n                onChange={(e)=>handleSearch(e.target.value)}\r\n                \r\n                /> \r\n\r\n\r\n            </FormControl>\r\n              <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box> \r\n\r\n             {loading ?(\r\n                <div>loading</div>\r\n             ):(\r\n                searchResult\r\n                ?.slice(0,4)\r\n                .map((user)=>(\r\n                    <UserListItem \r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={()=>handleGroup(user)}\r\n                    />\r\n                ))\r\n             )}\r\n           \r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n             <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n         \r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GroupChatModal","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\n\r\nimport ChatLoading from '../ChatLoading';\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from './ProfileModal';\r\n\r\n\r\nimport UserListItem from '../UserAvatar/UserListItem';\r\nimport { ChatState } from '../../Context/ChatProvider';\r\nimport GroupChatModal from './GroupChatModal'\r\nimport {Effect} from 'react-notification-badge'\r\n\r\nimport NotificationBadge from 'react-notification-badge'\r\n\r\nconst SideDrawer = () => {\r\n\r\n        \r\n\r\n    const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n    const {user,setSelectedChat,chats,setChats,notification,setNotification}=ChatState();\r\n\r\n\r\n  \r\n      const history = useHistory();\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n\r\n   const toast=useToast();\r\n \r\n  const handleSearch = async()=>{\r\n   if(!search)\r\n   {\r\n     toast({\r\n      title:\"Please Enter something in search\",\r\n      status:\"warning\",\r\n      duration:5000,\r\n      isClosable:true,\r\n      position:\"top-left\",\r\n     });\r\n     return;\r\n   }\r\n    try {\r\n\r\n      setLoading(true)\r\n      const config={\r\n        headers:{\r\n          Authorization:`Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const {data}=await axios.get(`/api/user?search=${search}`,config)\r\n\r\n       setLoading(false);\r\n       setSearchResult(data);\r\n\r\n    } catch (error)\r\n    {\r\n         toast({\r\n      title:\"Error Occured!\",\r\n      description:\"Failed to Load the Search Results\",\r\n      status:\"error\",\r\n      duration:5000,\r\n      isClosable:true,\r\n      position:\"bottom-left\",\r\n     });\r\n    }\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n \r\n  const accessChat=async(userId)=>{\r\n    try{\r\n        setLoadingChat(true);\r\n         const config={\r\n        headers:{\r\n          'Content-type':'application/json', \r\n          Authorization:`Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n     const {data}=await axios.post(`/api/chat`,{userId},config);\r\n          \r\n     if(!chats.find((c)=>c._id===data._id))\r\n          setChats([data,...chats]);\r\n\r\n\r\n     setSelectedChat(data);\r\n     setLoadingChat(false);\r\n     onClose();\r\n\r\n    } catch(error){\r\n       toast({\r\n      title:\"Error fetching the chat\",\r\n      description:error.message,\r\n      status:\"error\",\r\n      duration:5000,\r\n      isClosable:true,\r\n      position:\"bottom-left\",\r\n     });\r\n\r\n    }\r\n    \r\n  };\r\n\r\n\r\n\r\n\r\n \r\n\r\n  return (\r\n\r\n    <>\r\n    <Box\r\n    display={'flex'}\r\n    justifyContent={'space-between'}\r\n    alignItems={'center'}\r\n    bg='white'\r\n    w={'100%'}\r\n    p=\"5px 10px 5px 10px\"\r\n    borderWidth={'5px'} >\r\n      <Tooltip\r\n        label=\"Search Users to chat\" hasArrow placement='bottom-end'>\r\n          <Button variant='ghost' onClick={onOpen}>\r\n            <i class=\"fas fa-search\"></i>\r\n            <Text d={{base:\"none\",md:\"flex\"}} px='4'>Search User</Text>\r\n          </Button>\r\n      </Tooltip>\r\n      <Text fontSize={'2xl'} fontFamily={'Work sans'}> \r\n      Talkio\r\n      </Text>\r\n      <div>\r\n        <Menu>\r\n\r\n          <MenuButton p={'1'}>\r\n            <NotificationBadge\r\n            count={notification.length}\r\n         effect={Effect.SCALE}            \r\n            />\r\n\r\n           <BellIcon fontSize={'2xl'} m={'1'} />\r\n          </MenuButton>\r\n          {/* for notification */}\r\n         \r\n             <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={()=>{\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n)=>n!==notif));\r\n                  }}\r\n                  \r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${notif.sender.name}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n\r\n\r\n\r\n\r\n          </Menu>\r\n             {/* /for dp on right corner */}\r\n           <Menu>\r\n          <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\r\n             \r\n              <Avatar size='sm' cursor='pointer' name={user.name} src={user.pic} />\r\n          </MenuButton>\r\n\r\n          {/* menu list for list of two item my profile and log out */}\r\n          <MenuList>\r\n            <ProfileModal user={user}>\r\n                   <MenuItem> My Profile </MenuItem>\r\n            </ProfileModal>\r\n            \r\n            <MenuDivider/>\r\n            <MenuItem onClick={logoutHandler}> Log Out </MenuItem>\r\n          </MenuList>\r\n          \r\n        </Menu>\r\n\r\n          \r\n\r\n      </div>\r\n    </Box>\r\n    \r\n          <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n)}\r\n            {loadingChat && <Spinner ml='auto' d=\"flex\" />}\r\n          </DrawerBody>\r\n          \r\n\r\n        </DrawerContent>\r\n      </Drawer>\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n    </>\r\n\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default SideDrawer;","export const getSender = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\n\r\n\r\nexport const getSenderFull  = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1]: users[0];\r\n};\r\n\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameSenderMargin=(messages,m,i,userId)=>{\r\n  if(\r\n    i<messages.length-1 && \r\n    messages[i+1].sender._id===m.sender._id \r\n    && messages[i].sender._id!==userId\r\n  )\r\n  return 33;\r\n  else if (\r\n    (\r\n    i<messages.length-1 && messages[i+1].sender._id!==m.sender._id\r\n    && messages[i].sender._id!==userId)||\r\n    (i===messages.length-1 && messages[i].sender._id!==userId)\r\n    \r\n  )\r\n  return 0;\r\n  else\r\n  return\"auto\";\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\n\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast =useToast();\r\n   \r\n  const fetchChats =async()=>{\r\n    try {\r\n\r\n      const config={\r\n        headers:{\r\n          Authorization :`Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const {data}= await axios.get(\"/api/chat\",config);\r\n      \r\n      setChats(data);\r\n      \r\n    } catch (error) {\r\n      toast({\r\n        title:\"Error Occured!\",\r\n        description:\"Failed to Load the chats\",\r\n        status:\"error\",\r\n        duration:5000,\r\n        isClosable:true,\r\n        position:\"bottom-left\",\r\n      })\r\n      \r\n    }\r\n  };\r\n  useEffect(()=>{\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n\r\n  },[fetchAgain]);\r\n\r\nreturn (\r\n\r\n   <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n    <Box\r\n    pb={3}\r\n    px={3} \r\n    fontSize={{base:\"28px\",md:\"30px\"}}\r\n    fontFamily={'Work sans'}\r\n    d={'flex'}\r\n    w={'100%'}\r\n    justifyContent=\"space-between\"\r\n    alignItems=\"center\"\r\n    >\r\n     My Chats\r\n\r\n     <GroupChatModal>\r\n\r\n      <Button\r\n     d=\"flex\"\r\n     fontSize={{base:\"17px\",md:\"10px\",lg:\"17px\"}}\r\n     rightIcon={<AddIcon />}\r\n     \r\n     >\r\n      New Group Chat\r\n\r\n     </Button>\r\n\r\n\r\n     </GroupChatModal>\r\n     \r\n    </Box>\r\n\r\n    <Box\r\n    d=\"flex\"\r\n    flexDir=\"column\"\r\n    p={3}\r\n    bg=\"#F8F8F8\"\r\n    w=\"100%\"\r\n    h=\"100%\"\r\n    borderRadius=\"lg\"\r\n    overflowY={'hidden'}\r\n    >\r\n\r\n     {chats ? (\r\n\r\n      <Stack  overflowY='scroll'>\r\n        {/* change */}\r\n        {chats.map((chat)=>(\r\n        <Box\r\n         onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n        >\r\n          <Text>\r\n\r\n            {!chat.isGroupChat ? (\r\n              getSender(loggedUser,chat.users)\r\n\r\n            ) :chat.chatName}\r\n          </Text>\r\n\r\n                 {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n\r\n\r\n        </Box>\r\n\r\n        ))}\r\n\r\n\r\n      </Stack>\r\n\r\n\r\n     ) :  (\r\n\r\n       <ChatLoading />\r\n     )}\r\n\r\n\r\n    </Box>\r\n\r\n  </Box>\r\n)\r\n\r\n\r\n};\r\n\r\n\r\n\r\n\r\nexport default MyChats;","import React from 'react';\r\nimport ScrollableFeed from 'react-scrollable-feed'\r\nimport { isLastMessage, isSameSender } from '../config/ChatLogics';\r\nimport {  Tooltip ,Avatar  } from '@chakra-ui/react';\r\nimport {\r\n  \r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState} from '../Context/ChatProvider';\r\n\r\n\r\nconst ScrollableChat = ({messages}) => {\r\n    const {user}=ChatState();\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span style={{\r\n              backgroundColor:`${m.sender._id===user._id ? \"#BEE3F8\" :\"#B9F5D0\"}`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n              borderRadius:\"20px\",\r\n              padding:\"5px 15px\",\r\n              maxWidth:\"75%\",\r\n\r\n            }}>\r\n\r\n              {m.content}\r\n\r\n            </span>\r\n            \r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  )\r\n}\r\n\r\nexport default ScrollableChat;","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../UserAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({fetchAgain,setFetchAgain,fetchMessages}) => {\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const  [groupChatName,setGroupChatName]=useState();\r\n    const [search,setSearch]=useState(\"\");\r\n    const [searchResult,setSearchResult] =useState([]);\r\n    const [loading,setLoading] =useState(false);\r\n    const [renameLoading,setRenameLoading]=useState(false);\r\n\r\n    const toast=useToast();\r\n\r\n     const {selectedChat,setSelectedChat,user}=ChatState(); \r\n\r\n   \r\n  //    const handleRemove = async (user1) => {\r\n  //   if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n  //     toast({\r\n  //       title: \"Only admins can remove someone!\",\r\n  //       status: \"error\",\r\n  //       duration: 5000,\r\n  //       isClosable: true,\r\n  //       position: \"bottom\",\r\n  //     });\r\n  //     return;\r\n  //   }\r\n\r\n  //   try {\r\n  //     setLoading(true);\r\n  //     const config = {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${user.token}`,\r\n  //       },\r\n  //     };\r\n  //     const { data } = await axios.put(\r\n  //       `/api/chat/groupremove`,\r\n  //       {\r\n  //         chatId: selectedChat._id,\r\n  //         userId: user1._id,\r\n  //       },\r\n  //       config\r\n  //     );\r\n\r\n  //     user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n  //     setFetchAgain(!fetchAgain);\r\n  //   //  window.location.reload(false);\r\n  //   fetchMessages();\r\n  //     setLoading(false);\r\n  //   } catch (error) {\r\n  //     toast({\r\n  //       title: \"Error Occured!\",\r\n  //       description: error.response.data.message,\r\n  //       status: \"error\",\r\n  //       duration: 5000,\r\n  //       isClosable: true,\r\n  //       position: \"bottom\",\r\n  //     });\r\n  //     setLoading(false);\r\n  //   }\r\n  //   setGroupChatName(\"\");\r\n  // };\r\n\r\n\r\n  //    const handleRename= async()=>{\r\n  //     if(!groupChatName) \r\n  //     {\r\n  //       return;\r\n  //     }\r\n  //     try {\r\n        \r\n  //       setRenameloading(true)\r\n  //       const config={\r\n  //         headers:{\r\n  //           Authorization:`Bearer ${user.token}`\r\n  //         },\r\n  //       };\r\n  //       const {data}= await axios.put(`/api/chat/rename`,{\r\n  //         chatId:selectedChat._id,\r\n  //         chatName:groupChatName,\r\n  //       },config);\r\n        \r\n  //       setSelectedChat(data);\r\n  //       setFetchAgain(!fetchAgain);\r\n  //       setRenameloading(false)\r\n         \r\n  //     } catch (error) {\r\n  //       toast({\r\n  //         title:\"Error Occured!\",\r\n  //         description:error.response.data.message,\r\n  //         status:\"error\",\r\n  //         duration:5000,\r\n  //         isClosable:true,\r\n  //         position:\"bottom\"\r\n\r\n  //       });\r\n  //       setRenameloading(false)\r\n\r\n\r\n        \r\n  //     }\r\n  //      setGroupChatName(\"\")\r\n\r\n  //    }\r\n\r\n \r\n\r\n\r\n\r\n  //   const handleAddUser = async (user1) => {\r\n  //   if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n  //     toast({\r\n  //       title: \"User Already in group!\",\r\n  //       status: \"error\",\r\n  //       duration: 5000,\r\n  //       isClosable: true,\r\n  //       position: \"bottom\",\r\n  //     });\r\n  //     return;\r\n  //   }\r\n\r\n  //   if (selectedChat.groupAdmin._id !== user._id) {\r\n  //     toast({\r\n  //       title: \"Only admins can add someone!\",\r\n  //       status: \"error\",\r\n  //       duration: 5000,\r\n  //       isClosable: true,\r\n  //       position: \"bottom\",\r\n  //     });\r\n  //     return;\r\n  //   }\r\n\r\n  //   try {\r\n  //     setLoading(true);\r\n  //     const config = {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${user.token}`,\r\n  //       },\r\n  //     };\r\n  //     const { data } = await axios.put(\r\n  //       `/api/chat/groupadd`,\r\n  //       {\r\n  //         chatId: selectedChat._id,\r\n  //         userId: user1._id,\r\n  //       },\r\n  //       config\r\n  //     );\r\n\r\n  //     setSelectedChat(data);\r\n  //     setFetchAgain(!fetchAgain);\r\n  //     setLoading(false);\r\n  //     window.location.reload(false);\r\n  //   } catch (error) {\r\n  //     toast({\r\n  //       title: \"Error Occured!\",\r\n  //       description: error.response.data.message,\r\n  //       status: \"error\",\r\n  //       duration: 5000,\r\n  //       isClosable: true,\r\n  //       position: \"bottom\",\r\n  //     });\r\n  //     setLoading(false);\r\n  //   }\r\n  //   setGroupChatName(\"\");\r\n  // };\r\n\r\n  //     const  handleSearch=async(query)=>{\r\n  //       setSearch(query);\r\n  //       if(!query)\r\n  //       {\r\n  //           return;\r\n  //       }\r\n  //       try{\r\n\r\n  //           setLoading(true);\r\n  //           const config={\r\n  //               headers:{\r\n  //                   Authorization:`Bearer ${user.token}`,\r\n  //               },\r\n  //           };\r\n\r\n  //           const {data} = await axios.get(`/api/user?search=${search}`,config);\r\n  //           // console.log(data);\r\n  //           setLoading(false);\r\n  //           setSearchResult(data);\r\n\r\n\r\n\r\n  //       } catch(error)\r\n  //       { \r\n  //           toast({\r\n  //               title:\"Error Occured!\",\r\n  //               description:\"Failed to Load the Search Results\",\r\n  //               status:\"error\",\r\n  //               duration:5000,\r\n  //               isClosable:true,\r\n  //               position:\"bottom-left\",\r\n\r\n  //           });\r\n\r\n  //       }\r\n\r\n  //    }\r\n  \r\n const handleRemove = async (user1) => {\r\n    // user = loggedin user (group admin) user1 is the user we want to add\r\n    // selectedChat.groupAdmin._id !== user._id this means logged in user is not admin\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        \"api/chat/groupremove\",\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n        );\r\n        // if user1 he logged in user h, that is groupAdmin then make this selectedChat empty so that its get deleted for logged in user(admin), admin is itself getting removed from the group\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages()\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n  const handleAddUser = async (user1) => {\r\n    // selectedChat will be a one chatModel, isGroupChat is true, so users array will me more than 2 user\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    // user is logged in user(admin) and user1 is the user we trying to add\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        \"/api/chat/groupadd\",\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        \"/api/chat/rename\",\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      //   console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n     return (\r\n    <>\r\n      <IconButton d={{base:'flex'}} icon={<ViewIcon />}onClick={onOpen}/>\r\n\r\n      <Modal isOpen={isOpen} onClose={onClose} isCentered >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader \r\n          fontSize=\"35px\"\r\n          fontFamily=\"Work sans\"\r\n          d=\"flex\"\r\n          justifyContent={'center'}\r\n          \r\n          >\r\n            \r\n            {selectedChat.chatName}\r\n            \r\n            </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n\r\n            <Box  w={'100%'} d={'flex'}\r\n            flexWrap={'wrap'}\r\n            pb={3}\r\n            >\r\n              \r\n                {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))} \r\n              \r\n               \r\n            </Box>\r\n            <FormControl  d='flex'>\r\n              <Input\r\n              placeholder=\"Chat Name\"\r\n              mb={3}\r\n              value={groupChatName}\r\n              onChange={(e)=>setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n              variant=\"solid\"\r\n              colorScheme=\"teal\"\r\n              ml={1}\r\n              isLoading={renameLoading}\r\n              onClick={handleRename}\r\n              \r\n              >\r\n                Update\r\n              </Button>  \r\n              \r\n            </FormControl>\r\n\r\n\r\n            <FormControl  d='flex'>\r\n              <Input\r\n              placeholder=\"Add User to group\"\r\n              mb={1}\r\n            \r\n              onChange={(e)=>handleSearch(e.target.value)}\r\n              />\r\n            \r\n              \r\n            </FormControl>\r\n                {loading ?(\r\n               <Spinner size=\"lg\"/>\r\n             ):(\r\n                searchResult\r\n                ?.map((user)=>(\r\n                    <UserListItem \r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={()=>handleAddUser(user)}\r\n                    />\r\n                ))\r\n             )}\r\n          \r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button onClose={()=>handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          \r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateGroupChatModal","import React from 'react'\r\nimport { ChatState } from '../Context/ChatProvider'\r\nimport { Box } from '@chakra-ui/react';\r\nimport SingleChat from './SingleChat';\r\n\r\nconst ChatBox = ({fetchAgain,setFetchAgain}) => {\r\n\r\n  const {selectedChat} =ChatState();\r\n  return (\r\n    <Box\r\n    d={{base:selectedChat?\"flex\":\"none\",md:'flex'}}\r\n    alignItems={'center'}\r\n    flexDir={'column'}\r\n    p={3}\r\n    w={{base:\"100%\",md:\"68%\"}}\r\n    backgroundColor={'white'}\r\n    borderRadius={'lg'} \r\n    borderWidth={'1px'}\r\n    \r\n    >\r\n   <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ChatBox;","import { Box } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport ChatBox from \"../components/ChatBox\";\r\nimport { useState } from \"react\";\r\n\r\nconst Chatpage = () => {\r\n \r\n  const {user}=ChatState();\r\n  const [fetchAgain,setFetchAgain]=useState(false);\r\n  return (\r\n     <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && (<MyChats fetchAgain={fetchAgain}  />)}\r\n        {user &&  (<ChatBox  fetchAgain={fetchAgain} setFetchAgain={setFetchAgain}/> )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Chatpage;","\nimport './App.css';\nimport {Route } from \"react-router-dom\";\nimport Homepage from './pages/Homepage';\nimport Chatpage from './pages/Chatpage';\n\n\nfunction App() {\n \n \n\n  return (\n   \n     <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n      </div>\n    \n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nimport ChatProvider from './Context/ChatProvider';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  \n    \n    \n    <BrowserRouter>\n     <ChatProvider>\n    <ChakraProvider>\n        <App />  \n  </ChakraProvider>\n  </ChatProvider>\n  </BrowserRouter>,\n\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}